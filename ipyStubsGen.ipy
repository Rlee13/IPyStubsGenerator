import clr, sys, os

import sg_settings as SG
from sg_settings import *

clr.AddReference("System.Core")
import System

######## CHANGE TO ARGS
ASSEMBLY_NAME = "Eto"
########

sys.path.append(os.getcwd() + SG.ASSEMBLIES_PATH)

if (not clr.IsNetCoreApp):
    print(SG.dotnet_platform)
    sys.exit()
    
try:
    clr.AddReference(ASSEMBLY_NAME)
except Exception as e:
    print(SG.dependencies)
    print("\t\t\t" + ASSEMBLY_NAME, "from ", SG.ASSEMBLIES_PATH + "/" + ASSEMBLY_NAME + ".dll")
    sys.exit()

assembly_name = ASSEMBLY_NAME
assembly = None # 'Eto, Version=2.7.0.0, Culture=neutral, PublicKeyToken=null'
asm_module = None # 'Eto.dll'
asm_clases = []
asm_namespaces = []
initpy = []

for i in clr.References:
    if i.GetName().Name == assembly_name:
        assembly = i
        _x = assembly.GetModules()
        for j in _x:
            # common_asm = ["System", "Microsoft", "IronPython", "netstandard", "Mono", "ipy", "Snippets.scripting"]
            common_asm = ["System"]
            if not j.ToString().startswith(tuple(common_asm)):
                asm_module = j
                break
        break

_ret = []
for i in asm_module.GetTypes():
    if i.FullName.startswith(assembly_name):
        for _p in i.GetProperties():
            _attr = _p.GetCustomAttributes(True)
            for _a in _attr:
                if type(_a) is not type(System.Runtime.CompilerServices.CompilerGeneratedAttribute):
                    asm_clases.append(i)
                    _ret.append(i.FullName.rsplit('.', 1)[0])
asm_namespaces = list(set(_ret))

for ns in asm_namespaces:
    print(f"[INFO:] Process namespace: {ns}")
    lines = []
    # Create underlying folders
    try:
        System.IO.Directory.CreateDirectory(os.getcwd() + STUBS_PATH + "\\" + ns.replace('.', "\\"))
        current_initfile_path = os.getcwd() + STUBS_PATH + "\\" + ns.replace('.', "\\") + "\\__init__.py"
        current_initpy = System.IO.File.Create(current_initfile_path)
        current_initpy.Close()
    except Exception as e:
        print("[IO ERROR:]", e)
        sys.exit()

    # initpy.append(current_initpy)

    # Generate class definitions
    for _a in asm_clases:
        # print(i)
        try:
            _ret = _a.BaseType.ToString().replace('.', "").replace('`', '_').replace('[', '_').replace(']', '_') if _a.BaseType is not None else ""
        except Exception as e:
            print(f"[ERROR]: {e}")
            sys.exit()

        line = class_template.substitute(class_name = _a.Name, 
                            class_body = 'pass',
                            class_base_type = _ret).strip()
        print(line)
        lines.append(line)
    
    try: 
        # print(dir(current_initpy))
        System.IO.File.AppendAllLines(current_initfile_path, lines)
        current_initpy.Close()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        print("[IO ERROR:]", exc_tb.tb_lineno, e)
        sys.exit()

print(f"\nProcessed {len(asm_namespaces)} namespaces, {len(asm_clases)} classes.")