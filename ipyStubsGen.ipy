"""
IronPython Stubs Generator for VSCode

General Usage:
--------------
- place the .NET dll for which you generate the stubs in the 'Libs' folder. 
  If a xml file (VStudio doc comments) was provided, place it here too 
  (must have the same name as the assembly).
- on Windows run (current folder must be ipyStubsGen.ipy's folder): 

    C:\...\IronPython34\\net6.0\ipy.bat ipyStubsGen.ipy -f <name_of_the_dll_placed_in_Libs_folder>

- on Linux run (if ipy dotnet tool was installed):

    ipy ipyStubsGen.ipy -f <name_of_the_dll_placed_in_Libs_folder>

- the stubs files and folders are generated in the 'Stubs' folder.
- copy the generated folder into the '.ipystubs' folder inside the project's stucture.
- add to the .vscode\settings.json file in your project the following two lines:

    "python.autoComplete.extraPaths": ["${workspaceFolder}/.ipystubs"],
    "python.analysis.extraPaths": ["${workspaceFolder}/.ipystubs"]

"""

import clr, sys, os

import sg_settings as SG
from sg_settings import *

__version__ = "0.1.0"
__author__ = "RLee"
__repository__ = "https://github.com/Rlee13/IPyStubsGenerator"

ASSEMBLY_NAME = ""


def gen_stubs():
    """
    Generates the stubs.
    Destination folder is ./Stubs
    """
    global ASSEMBLY_NAME

    sys.path.append(os.getcwd() + os.sep + SG.ASSEMBLIES_PATH)
    clr.AddReference(ASSEMBLY_NAME)
    
    assembly_name = ASSEMBLY_NAME
    assembly = None # ' Eto, Version=2.7.0.0, Culture=neutral, PublicKeyToken=null'
    assembly_version = None
    asm_module = None # ' Eto.dll'
    nr_asm_clases = 0
    nr_asm_enums = 0
    nr_asm_skipped = 0
    asm_namespaces = set()
    current_initpy = None
    asm_xmldocs = True
    asm_doc = None

    import System

    clr.AddReference("System.Diagnostics.FileVersionInfo")
    import System.Diagnostics.FileVersionInfo as FVI # type: ignore

    droot = System.IO.DirectoryInfo(os.getcwd() +  os.sep + STUBS_PATH +  os.sep + assembly_name)
    if System.IO.Directory.Exists(droot.ToString()):
        for _f in droot.GetFiles():
            _f.Delete(); 
        for _d in droot.GetDirectories():
            _d.Delete(True)

    # check if xml doc available
    _asm_doc_filename = os.getcwd() + os.sep + ASSEMBLIES_PATH + os.sep + assembly_name + ".xml"
    if System.IO.File.Exists(_asm_doc_filename):
        clr.AddReference('System.Xml')
        from System.Xml import XmlDocument # type: ignore
        try:
            asm_doc = XmlDocument()
            asm_doc.Load(_asm_doc_filename)
            asm_xmldocs = True
        except Exception as e:
            print("[XML ERROR:]", e)

    print("Generating stubs files and folders...")
    for i in clr.References:
        if i.GetName().Name == assembly_name:
            assembly = i # Eto, Version=2.7.0.0, Culture=neutral, PublicKeyToken=null
            assembly_version = assembly.GetName().Version.ToString()

            _atf = assembly.GetCustomAttributes(System.Runtime.Versioning.TargetFrameworkAttribute, False)
            assembly_target_framework = _atf[0].FrameworkDisplayName if len(_atf) > 0 else ""
                
            _asl = FVI.GetVersionInfo(assembly.Location)
            file_version         = _asl.FileVersion.ToString()
            product_version      = _asl.ProductVersion.ToString()
            assembly_title       = _asl.FileDescription
            assembly_description = _asl.Comments
            assembly_product     = _asl.ProductName
            assembly_company     = _asl.CompanyName
            assembly_copyright   = _asl.LegalCopyright
            assembly_trademark   = _asl.LegalTrademarks

            _x = assembly.GetModules()
            for j in _x:
                if not j.ToString().startswith(tuple(common_asm)):
                    asm_module = j
                    break
                
            _ret_asm_types = [x for x in asm_module.GetTypes() if x.IsPublic]
            _idx = 0
            for _cls in _ret_asm_types:

                # progressing ...
                if SG.SHOW_PROGRESS:
                    print("\r" + SG.TWIRL[_idx % 4], end = "", flush = True)
                    sys.stdout.write("\r" + SG.TWIRL[_idx % 4])
                    sys.stdout.flush()
                    _idx += 1

                if not _cls.Namespace.startswith(tuple(common_asm)):
                    ns = _cls.FullName.rsplit('.', 1)[0]
                    asm_namespaces.add(ns)
                    lines = []

                    # Create stubs' underlying folder(s) and file(s)
                    current_initfile_path = os.getcwd() + os.sep + STUBS_PATH + os.sep + ns.replace('.', os.sep) + os.sep + "__init__.py"
                    if not System.IO.File.Exists(current_initfile_path):
                        
                        System.IO.Directory.CreateDirectory(os.getcwd() + os.sep + STUBS_PATH + os.sep + ns.replace('.', os.sep))
                        current_initpy = System.IO.File.Create(current_initfile_path)

                        _init_line = init_file_header_template.substitute(
                                assembly_version = assembly_version, 
                                assembly_target_framework = assembly_target_framework,
                                file_version = file_version,
                                product_version = product_version, 
                                assembly_title = assembly_title,
                                assembly_description = assembly_description,
                                assembly_product = assembly_product,
                                assembly_company = assembly_company,
                                assembly_copyright = assembly_copyright, 
                                assembly_trademark = assembly_trademark,
                                version = __version__
                        )
                        
                        current_initpy.Write(System.Text.Encoding.UTF8.GetBytes(_init_line), 0, len(_init_line))
                        current_initpy.Close()

                    # get all properties
                    _ret_cls_prop = [x for x in _cls.GetProperties(System.Reflection.BindingFlags.Instance | 
                                                        System.Reflection.BindingFlags.Static | 
                                                        System.Reflection.BindingFlags.Public)]
                    # ignore if it is compiler generated
                    _compgen = False
                    for _p in _ret_cls_prop:               
                        _attr = _p.GetCustomAttributes(True)
                        for _a in _attr:
                            if type(_a) is type(System.Runtime.CompilerServices.CompilerGeneratedAttribute):
                                _compgen = True
                                break
                    if _compgen:
                        continue
                    
                    _prop_lines = []
                    
                    for _prop in _ret_cls_prop:
                        _prop_docs = ""
                        if asm_xmldocs:
                            try:
                                _descript = asm_doc.SelectNodes("//member[@name='P:" + _cls.FullName + "." + _prop.Name + "']")
                                for i in _descript[0].SelectNodes("*"):
                                    _prop_docs = _prop_docs + "#### " + i.Name.capitalize() + "\n - " + i.InnerText.strip() + "\n\n"

                            except Exception as e:
                                pass
                        _prop_line = property_template.substitute(property_name = _prop.Name,
                                property_doc = _prop_docs.strip() if _prop_docs else ""
                                )
                        _prop_lines.append(_prop_line)
                    
                    _prop_body_str = "".join(_prop_lines)

                    # get all methods
                    _ret_cls_methods = [x for x in _cls.GetMethods(System.Reflection.BindingFlags.DeclaredOnly |
                                                    System.Reflection.BindingFlags.Public |
                                                    System.Reflection.BindingFlags.Instance)]
                    _metd_lines = []
                    
                    for _metd in _ret_cls_methods:
                        if _metd.Name.startswith(("set_","get_")):
                            continue
                        # the the parameters
                        # TODO redo the arguments to represent the actual names/types
                        _metd_args = ",".join([x.ToString().replace(' ', '_').replace('.', "").replace('`', '_').replace('[', '_').replace(']', '_').replace('&', '_') for x in _metd.GetParameters()])
                        if len(_metd_args) > 0: _metd_args = ", " + _metd_args

                        metd_doc_str = ""
                        # if xml doc then process it
                        if asm_xmldocs:
                            try:
                                _descript = asm_doc.SelectNodes("//member[@name='M:" + _cls.FullName + "." + _metd.Name + "']")
                                for i in _descript[0].SelectNodes("*"):
                                    metd_doc_str = metd_doc_str + "#### " + i.Name.capitalize() + "\n - " + i.InnerText.strip() + "\n\n"
                            except Exception as e:
                                pass

                        _metd_line = method_template.substitute(method_name = _metd.Name, 
                                                        metd_doc = metd_doc_str.strip(),
                                                        method_args = _metd_args,
                                                        return_val = _metd.ReturnParameter.ToString().replace(' ', '_').replace('.', "").replace('`', '_').replace('[', '_').replace(']', '_').replace('&', '_'))
                        _metd_lines.append(_metd_line)
                    
                    _meth_body_str = "".join(_metd_lines)

                    # get class Base type 
                    # TODO Interface
                    _cbt = ""
                    try:
                        _cbt = _cls.BaseType.ToString()
                    except Exception as e:
                        nr_asm_skipped += 1
                        continue

                    # test if enum or class TODO get real values for the enums fields
                    if _cbt is not "":
                        if _cbt == "System.Enum":
                            _enm_lines = []
                            _enm_val = 0
                            _enm_line = ""
                            enum_doc_str = ""
                            # enum_field_doc_str = ""
                            for _x in System.Enum.GetValues(_cls):
                                enum_field_doc_str = ""
                                _enm_line = str(_x) + " = " + str(_enm_val)
                                # if xml doc then process it
                                if asm_xmldocs:
                                    try:
                                        _descript = asm_doc.SelectNodes("//member[@name='F:" + _cls.FullName + "." + _x.ToString() + "']")
                                        for i in _descript[0].SelectNodes("*"):
                                            enum_field_doc_str = enum_field_doc_str + "#### " + i.Name.capitalize() + "\n - " + i.InnerText.strip() + "\n\n"
                                    except Exception as e:
                                        pass                            
                                _enm_lines.append(_enm_line)
                                _enm_lines.append("\"\"\"\n" + enum_field_doc_str.strip() + "\n    \"\"\"")
                                _enm_val += 1

                            # if xml doc then process it
                            if asm_xmldocs:
                                try:
                                    _descript = asm_doc.SelectNodes("//member[@name='T:" + _cls.FullName + "']")
                                    for i in _descript[0].SelectNodes("*"):
                                        enum_doc_str = enum_doc_str + "#### " + i.Name.capitalize() + "\n - " + i.InnerText.strip() + "\n\n"
                                except Exception as e:
                                    pass

                            line = enum_template.substitute(enum_name = _cls.Name.rsplit('`',1)[0],
                                                enum_type = _cls.IsEnum,
                                                enum_doc = enum_doc_str.strip(),
                                                enum_body = "pass" if len(_enm_lines) == 0 else "\n    ".join(_enm_lines)
                                                ).rstrip()
                            nr_asm_enums += 1
                        else:
                            class_doc_str = ""
                            _ret_cls_base = _cls.BaseType.ToString().replace('.', "").replace('`', '_').replace('[', '_').replace(']', '_') if _cls.BaseType is not None else ""
                            class_body_str = _prop_body_str + _meth_body_str

                            # if xml doc then process it
                            if asm_xmldocs:
                                try:
                                    _descript = asm_doc.SelectNodes("//member[@name='T:" + _cls.FullName + "']")
                                    for i in _descript[0].SelectNodes("*"):
                                        class_doc_str = class_doc_str + "#### " + i.Name.capitalize() + "\n - " + i.InnerText.strip() + "\n\n"
                                except Exception as e:
                                    pass 
                            
                            line = class_template.substitute(class_name = _cls.Name.rsplit('`',1)[0],
                                                class_abstract = _cls.IsAbstract,
                                                class_doc = class_doc_str.strip(),
                                                class_body = class_body_str if len(class_body_str) > 0 else "pass",
                                                class_base_type = _ret_cls_base).rstrip()
                            nr_asm_clases += 1

                    lines.append(line)
                    
                    System.IO.File.AppendAllLines(current_initfile_path, lines)
                    if current_initpy is not None: current_initpy.Close()

    # make sure that all folders have a __init__ file
    _root_dir = os.getcwd() +  os.sep + STUBS_PATH +  os.sep + assembly_name.split(".")[0]
    _dirs = [x[0] for x in os.walk(_root_dir)]
    for x in _dirs:
        _initfile_path = x + os.sep + "__init__.py"
        if not System.IO.File.Exists(_initfile_path):
            System.IO.File.Create(_initfile_path).Close()

    print(f"\nProcessed {len(asm_namespaces)} namespaces, {nr_asm_clases} classes, {nr_asm_enums} enums, {nr_asm_skipped} skipped.") # type: ignore


def get_namespaces():
    """
    Returns a set containing the public assembly's modules/namespaces. 
    The modules defined in 'common_asm' are ignored.
    """
    global ASSEMBLY_NAME

    sys.path.append(os.getcwd() + os.sep + SG.ASSEMBLIES_PATH)
    clr.AddReference(ASSEMBLY_NAME)

    for i in clr.References:
        if i.GetName().Name == ASSEMBLY_NAME:
            assembly = i # Eto, Version=2.7.0.0, Culture=neutral, PublicKeyToken=null
            _x = assembly.GetModules()
            for j in _x:
                if not j.ToString().startswith(tuple(common_asm)):
                    asm_module = j
                    break
            
            asm_namespaces = set([x.FullName.rsplit('.', 1)[0] for x in asm_module.GetTypes() if x.Namespace and x.IsPublic])
            return asm_namespaces


def main(args = None):
    global ASSEMBLY_NAME

    # check if .NET platform is present
    if (not clr.IsNetCoreApp):
        # raise "wrong platform"
        raise ValueError(SG.dotnet_platform)
    else:
        import argparse
        parser = argparse.ArgumentParser(prog="ipyStubsGen.ipy",
                                        description = SG.help_template + __version__)
        parser.add_argument('-h1', '--morehelp', action='store_true', 
                            help='a more detailed help message.')
        parser.add_argument('-f', '--filename', type=str, 
                            help='library name to analyse.')
        parser.add_argument('-l', '--listns', type=str, 
                            help='list the namespaces in the assembly and exit.')
           
        options = parser.parse_args(args)
        
        if options.morehelp:
            print(help_template0.substitute(version = __version__))
            
        elif options.filename:
            ASSEMBLY_NAME = options.filename
            gen_stubs()

        elif options.listns:
            ASSEMBLY_NAME = options.listns
            _ns = get_namespaces()
            if _ns:
                _msg = f"Modules contained in assembly {ASSEMBLY_NAME}:" # type: ignore
                print()
                print(_msg) 
                print("="*len(_msg))
                print("\n".join(_ns))

        else: # if no arguments are given
            parser.print_help()
            sys.exit(1)

if __name__ == '__main__':
    _ret = 1
    
    try:
        main()
        _ret = 0
    except OSError:
        print(f"{SG.dependencies} {ASSEMBLY_NAME} from {SG.ASSEMBLIES_PATH + os.sep + ASSEMBLY_NAME}") # type: ignore
    
    except Exception as e:
        print(f"{type(e)}:: {e}", file = sys.stderr) # type: ignore

    sys.exit(_ret)